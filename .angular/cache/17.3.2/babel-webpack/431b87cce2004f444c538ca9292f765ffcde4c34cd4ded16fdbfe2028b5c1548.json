{"ast":null,"code":"import { local, prod } from 'src/environments';\nimport { finalize } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-spinner\";\nexport class ApiInterceptor {\n  constructor(spinner) {\n    this.spinner = spinner;\n  }\n  intercept(req, next) {\n    const api = !local.production ? local.baseApi : prod.baseApi;\n    this.spinner.show();\n    const request = req.clone({\n      url: `${api}${req.url}`\n    });\n    return next.handle(request).pipe(finalize(() => this.spinner.hide()));\n  }\n  static #_ = this.ɵfac = function ApiInterceptor_Factory(t) {\n    return new (t || ApiInterceptor)(i0.ɵɵinject(i1.NgxSpinnerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiInterceptor,\n    factory: ApiInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["local","prod","finalize","ApiInterceptor","constructor","spinner","intercept","req","next","api","production","baseApi","show","request","clone","url","handle","pipe","hide","_","i0","ɵɵinject","i1","NgxSpinnerService","_2","factory","ɵfac"],"sources":["C:\\Projects\\RecipesSharer\\web\\src\\app\\helpers\\interceptors\\api.interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { local, prod } from 'src/environments';\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class ApiInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        private spinner: NgxSpinnerService\r\n    ) { }\r\n    \r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const api = !local.production ? local.baseApi : prod.baseApi;\r\n        this.spinner.show();\r\n        const request = req.clone({ \r\n            url: `${api}${req.url}`,\r\n        });\r\n        return next.handle(request).pipe(finalize(() => this.spinner.hide()));\r\n    }\r\n}"],"mappings":"AAGA,SAASA,KAAK,EAAEC,IAAI,QAAQ,kBAAkB;AAE9C,SAASC,QAAQ,QAAQ,gBAAgB;;;AAGzC,OAAM,MAAOC,cAAc;EACvBC,YACYC,OAA0B;IAA1B,KAAAA,OAAO,GAAPA,OAAO;EACf;EAEJC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,MAAMC,GAAG,GAAG,CAACT,KAAK,CAACU,UAAU,GAAGV,KAAK,CAACW,OAAO,GAAGV,IAAI,CAACU,OAAO;IAC5D,IAAI,CAACN,OAAO,CAACO,IAAI,EAAE;IACnB,MAAMC,OAAO,GAAGN,GAAG,CAACO,KAAK,CAAC;MACtBC,GAAG,EAAE,GAAGN,GAAG,GAAGF,GAAG,CAACQ,GAAG;KACxB,CAAC;IACF,OAAOP,IAAI,CAACQ,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAACf,QAAQ,CAAC,MAAM,IAAI,CAACG,OAAO,CAACa,IAAI,EAAE,CAAC,CAAC;EACzE;EAAC,QAAAC,CAAA,G;qBAZQhB,cAAc,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrB,cAAc;IAAAsB,OAAA,EAAdtB,cAAc,CAAAuB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}