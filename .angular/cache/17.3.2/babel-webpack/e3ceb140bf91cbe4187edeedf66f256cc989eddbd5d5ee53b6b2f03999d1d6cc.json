{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class FormInterceptor {\n  intercept(req, next) {\n    const body = req.body;\n    let formdata = new FormData();\n    if (body?.formData) {\n      for (var key in body) {\n        if (Array.isArray(body[key])) {\n          for (var _key in body[key]) {\n            if (Array.isArray(body[key][_key])) {\n              for (var i in body[key][_key]) {\n                formdata.append(key + '[' + _key + '][' + i + ']', body[key][_key][i]);\n              }\n            } else {\n              formdata.append(`${key}`, body[key][_key], _key);\n            }\n          }\n        } else {\n          formdata.append(key, body[key]);\n        }\n      }\n      const request = req.clone({\n        body: formdata\n      });\n      return next.handle(request);\n    }\n    return next.handle(req);\n  }\n  static #_ = this.ɵfac = function FormInterceptor_Factory(t) {\n    return new (t || FormInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormInterceptor,\n    factory: FormInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["FormInterceptor","intercept","req","next","body","formdata","FormData","formData","key","Array","isArray","_key","i","append","request","clone","handle","_","_2","factory","ɵfac"],"sources":["C:\\Projects\\RecipesSharer\\web\\src\\app\\helpers\\interceptors\\form.interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { local, prod } from 'src/environments';\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class FormInterceptor implements HttpInterceptor {\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const body = req.body;\r\n        let formdata = new FormData();\r\n        if (body?.formData) {\r\n            for (var key in body) {\r\n                if (Array.isArray(body[key])) {\r\n                    for (var _key in body[key]) {\r\n                        if (Array.isArray(body[key][_key])) {\r\n                            for (var i in body[key][_key]) {\r\n                                formdata.append(key + '[' + _key + '][' + i + ']', body[key][_key][i]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            formdata.append(`${key}`, body[key][_key], _key);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    formdata.append(key, body[key]);\r\n                }\r\n            }\r\n            const request = req.clone({ body: formdata });\r\n            return next.handle(request);\r\n        }\r\n        \r\n        return next.handle(req);\r\n    }\r\n}"],"mappings":";AAOA,OAAM,MAAOA,eAAe;EAExBC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,MAAMC,IAAI,GAAGF,GAAG,CAACE,IAAI;IACrB,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC7B,IAAIF,IAAI,EAAEG,QAAQ,EAAE;MAChB,KAAK,IAAIC,GAAG,IAAIJ,IAAI,EAAE;QAClB,IAAIK,KAAK,CAACC,OAAO,CAACN,IAAI,CAACI,GAAG,CAAC,CAAC,EAAE;UAC1B,KAAK,IAAIG,IAAI,IAAIP,IAAI,CAACI,GAAG,CAAC,EAAE;YACxB,IAAIC,KAAK,CAACC,OAAO,CAACN,IAAI,CAACI,GAAG,CAAC,CAACG,IAAI,CAAC,CAAC,EAAE;cAChC,KAAK,IAAIC,CAAC,IAAIR,IAAI,CAACI,GAAG,CAAC,CAACG,IAAI,CAAC,EAAE;gBAC3BN,QAAQ,CAACQ,MAAM,CAACL,GAAG,GAAG,GAAG,GAAGG,IAAI,GAAG,IAAI,GAAGC,CAAC,GAAG,GAAG,EAAER,IAAI,CAACI,GAAG,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,CAAC,CAAC;cAC1E;YACJ,CAAC,MACI;cACDP,QAAQ,CAACQ,MAAM,CAAC,GAAGL,GAAG,EAAE,EAAEJ,IAAI,CAACI,GAAG,CAAC,CAACG,IAAI,CAAC,EAAEA,IAAI,CAAC;YACpD;UACJ;QACJ,CAAC,MACI;UACDN,QAAQ,CAACQ,MAAM,CAACL,GAAG,EAAEJ,IAAI,CAACI,GAAG,CAAC,CAAC;QACnC;MACJ;MACA,MAAMM,OAAO,GAAGZ,GAAG,CAACa,KAAK,CAAC;QAAEX,IAAI,EAAEC;MAAQ,CAAE,CAAC;MAC7C,OAAOF,IAAI,CAACa,MAAM,CAACF,OAAO,CAAC;IAC/B;IAEA,OAAOX,IAAI,CAACa,MAAM,CAACd,GAAG,CAAC;EAC3B;EAAC,QAAAe,CAAA,G;qBA5BQjB,eAAe;EAAA;EAAA,QAAAkB,EAAA,G;WAAflB,eAAe;IAAAmB,OAAA,EAAfnB,eAAe,CAAAoB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}