{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 4, 0);\n    i0.ɵɵlistener(\"paste\", function NgOtpInputComponent_div_0_input_1_Template_input_paste_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.handlePaste($event));\n    })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) {\n      const i_r3 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onKeyUp($event, i_r3));\n    })(\"input\", function NgOtpInputComponent_div_0_input_1_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onInput($event));\n    })(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) {\n      const i_r3 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onKeyDown($event, i_r3));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    i0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r4])(\"id\", ctx_r1.getBoxId(i_r3));\n  }\n}\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 2, 9, \"input\", 3);\n    i0.ɵɵpipe(2, \"keys\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"ng-otp-input-wrapper wrapper \", ctx_r1.config.containerClass, \"\");\n    i0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r1.componentKey, \"\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.config.containerStyles);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 7, ctx_r1.otpForm == null ? null : ctx_r1.otpForm.controls));\n  }\n}\nclass KeyboardUtil {\n  static ifTab(event) {\n    return this.ifKey(event, 'Tab');\n  }\n  static ifDelete(event) {\n    return this.ifKey(event, 'Delete;Del');\n  }\n  static ifBackspace(event) {\n    return this.ifKey(event, 'Backspace');\n  }\n  static ifRightArrow(event) {\n    return this.ifKey(event, 'ArrowRight;Right');\n  }\n  static ifLeftArrow(event) {\n    return this.ifKey(event, 'ArrowLeft;Left');\n  }\n  static ifSpacebar(event) {\n    return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\n  }\n  static ifKey(event, keys) {\n    let keysToCheck = keys.split(';');\n    return keysToCheck.some(k => k === event.key);\n  }\n}\nclass KeysPipe {\n  transform(value) {\n    return Object.keys(value);\n  }\n}\n/** @nocollapse */\nKeysPipe.ɵfac = function KeysPipe_Factory(t) {\n  return new (t || KeysPipe)();\n};\n/** @nocollapse */\nKeysPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"keys\",\n  type: KeysPipe,\n  pure: true\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeysPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'keys'\n    }]\n  }], null, null);\n})();\nclass NgOtpInputComponent {\n  constructor(keysPipe, document) {\n    this.keysPipe = keysPipe;\n    this.document = document;\n    this.config = {\n      length: 4\n    };\n    // tslint:disable-next-line: no-output-on-prefix\n    this.onInputChange = new EventEmitter();\n    this.inputControls = new Array(this.config.length);\n    this.componentKey = Math.random().toString(36).substring(2) + new Date().getTime().toString(36);\n  }\n  get inputType() {\n    return this.config?.isPasswordInput ? 'password' : this.config?.allowNumbersOnly ? 'tel' : 'text';\n  }\n  ngOnInit() {\n    this.otpForm = new FormGroup({});\n    for (let index = 0; index < this.config.length; index++) {\n      this.otpForm.addControl(this.getControlName(index), new FormControl());\n    }\n    this.otpForm.valueChanges.subscribe(v => {\n      this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n        var val = this.otpForm.controls[k].value;\n        if (val && val.length > 1) {\n          if (val.length >= this.config.length) {\n            this.setValue(val);\n          } else {\n            this.rebuildValue();\n          }\n        }\n      });\n    });\n  }\n  ngAfterViewInit() {\n    if (!this.config.disableAutoFocus) {\n      const containerItem = this.document.getElementById(`c_${this.componentKey}`);\n      if (containerItem) {\n        const ele = containerItem.getElementsByClassName('otp-input')[0];\n        if (ele && ele.focus) {\n          ele.focus();\n        }\n      }\n    }\n  }\n  getControlName(idx) {\n    return `ctrl_${idx}`;\n  }\n  onKeyDown($event, inputIdx) {\n    const prevInputId = this.getBoxId(inputIdx - 1);\n    const currentInputId = this.getBoxId(inputIdx);\n    if (KeyboardUtil.ifSpacebar($event)) {\n      $event.preventDefault();\n      return false;\n    }\n    if (KeyboardUtil.ifBackspace($event)) {\n      if (!$event.target.value) {\n        this.clearInput(prevInputId, inputIdx - 1);\n        this.setSelected(prevInputId);\n      } else {\n        this.clearInput(currentInputId, inputIdx);\n      }\n      this.rebuildValue();\n      return;\n    }\n  }\n  onInput($event) {\n    let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\n    if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\n      $event.target.value = '';\n      $event.stopPropagation();\n      $event.preventDefault();\n      return;\n    }\n  }\n  onKeyUp($event, inputIdx) {\n    if (KeyboardUtil.ifTab($event)) {\n      inputIdx -= 1;\n    }\n    const nextInputId = this.getBoxId(inputIdx + 1);\n    const prevInputId = this.getBoxId(inputIdx - 1);\n    const currentInputId = this.getBoxId(inputIdx);\n    if (KeyboardUtil.ifRightArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(nextInputId);\n      return;\n    }\n    if (KeyboardUtil.ifLeftArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(prevInputId);\n      return;\n    }\n    if (KeyboardUtil.ifDelete($event)) {\n      if (!$event.target.value) {\n        this.clearInput(prevInputId, inputIdx - 1);\n        this.setSelected(prevInputId);\n      } else {\n        this.clearInput(currentInputId, inputIdx);\n      }\n      this.rebuildValue();\n      return;\n    }\n    if (!$event.target.value) {\n      return;\n    }\n    if (this.ifValidKeyCode($event)) {\n      this.setSelected(nextInputId);\n    }\n    this.rebuildValue();\n  }\n  validateNumber(val) {\n    return val && /^[0-9]+$/.test(val);\n  }\n  getBoxId(idx) {\n    return `otp_${idx}_${this.componentKey}`;\n  }\n  clearInput(eleId, inputIdx) {\n    let ctrlName = this.getControlName(inputIdx);\n    this.otpForm.controls[ctrlName]?.setValue(null);\n    const ele = this.document.getElementById(eleId);\n    if (ele && ele instanceof HTMLInputElement) {\n      ele.value = null;\n    }\n  }\n  setSelected(eleId) {\n    this.focusTo(eleId);\n    const ele = this.document.getElementById(eleId);\n    if (ele && ele.setSelectionRange) {\n      setTimeout(() => {\n        ele.setSelectionRange(0, 1);\n      }, 0);\n    }\n  }\n  ifValidKeyCode(event) {\n    const inp = event.key;\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    return isMobile || /[a-zA-Z0-9-_]/.test(inp);\n  }\n  focusTo(eleId) {\n    const ele = this.document.getElementById(eleId);\n    if (ele) {\n      ele.focus();\n    }\n  }\n  // method to set component value\n  setValue(value) {\n    if (this.config.allowNumbersOnly && isNaN(value)) {\n      return;\n    }\n    this.otpForm.reset();\n    if (!value) {\n      this.rebuildValue();\n      return;\n    }\n    value = value.toString().replace(/\\s/g, ''); // remove whitespace\n    Array.from(value).forEach((c, idx) => {\n      if (this.otpForm.get(this.getControlName(idx))) {\n        this.otpForm.get(this.getControlName(idx)).setValue(c);\n      }\n    });\n    if (!this.config.disableAutoFocus) {\n      const containerItem = this.document.getElementById(`c_${this.componentKey}`);\n      var indexOfElementToFocus = value.length < this.config.length ? value.length : this.config.length - 1;\n      let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\n      if (ele && ele.focus) {\n        ele.focus();\n      }\n    }\n    this.rebuildValue();\n  }\n  rebuildValue() {\n    let val = '';\n    this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n      if (this.otpForm.controls[k].value) {\n        let ctrlVal = this.otpForm.controls[k].value;\n        let isLengthExceed = ctrlVal.length > 1;\n        let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\n        ctrlVal = ctrlVal[0];\n        let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\n        if (isCaseTransformEnabled && transformedVal == ctrlVal) {\n          isCaseTransformEnabled = false;\n        } else {\n          ctrlVal = transformedVal;\n        }\n        val += ctrlVal;\n        if (isLengthExceed || isCaseTransformEnabled) {\n          this.otpForm.controls[k].setValue(ctrlVal);\n        }\n      }\n    });\n    if (this.formCtrl?.setValue) {\n      this.formCtrl.setValue(val);\n    }\n    this.onInputChange.emit(val);\n    this.currentVal = val;\n  }\n  handlePaste(e) {\n    // Get pasted data via clipboard API\n    let clipboardData = e.clipboardData || window['clipboardData'];\n    if (clipboardData) {\n      var pastedData = clipboardData.getData('Text');\n    }\n    // Stop data actually being pasted into div\n    e.stopPropagation();\n    e.preventDefault();\n    if (!pastedData || this.config.allowNumbersOnly && !this.validateNumber(pastedData)) {\n      return;\n    }\n    this.setValue(pastedData);\n  }\n}\n/** @nocollapse */\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) {\n  return new (t || NgOtpInputComponent)(i0.ɵɵdirectiveInject(KeysPipe), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n/** @nocollapse */\nNgOtpInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgOtpInputComponent,\n  selectors: [[\"ng-otp-input\"]],\n  inputs: {\n    config: \"config\",\n    formCtrl: \"formCtrl\"\n  },\n  outputs: {\n    onInputChange: \"onInputChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"inp\", \"\"], [3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"paste\", \"keyup\", \"input\", \"keydown\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"paste\", \"keyup\", \"input\", \"keydown\", \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"formControl\", \"id\"]],\n  template: function NgOtpInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 9, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    }\n  },\n  dependencies: [i2.NgIf, i2.NgStyle, i2.NgForOf, i3.DefaultValueAccessor, i3.PatternValidator, i3.NgControlStatus, i3.FormControlDirective, KeysPipe],\n  styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-otp-input',\n      template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\",\n      styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: KeysPipe\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    onInputChange: [{\n      type: Output\n    }],\n    formCtrl: [{\n      type: Input\n    }]\n  });\n})();\nclass NgOtpInputModule {}\n/** @nocollapse */\nNgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) {\n  return new (t || NgOtpInputModule)();\n};\n/** @nocollapse */\nNgOtpInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgOtpInputModule\n});\n/** @nocollapse */\nNgOtpInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [KeysPipe],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule],\n      declarations: [NgOtpInputComponent, KeysPipe],\n      exports: [NgOtpInputComponent],\n      providers: [KeysPipe]\n    }]\n  }], null, null);\n})();\nclass Config {}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };","map":{"version":3,"names":["i0","Pipe","EventEmitter","Component","Inject","Input","Output","NgModule","i3","FormGroup","FormControl","FormsModule","ReactiveFormsModule","i2","DOCUMENT","CommonModule","NgOtpInputComponent_div_0_input_1_Template","rf","ctx","_r1","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","NgOtpInputComponent_div_0_input_1_Template_input_paste_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","handlePaste","NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener","i_r3","index","onKeyUp","NgOtpInputComponent_div_0_input_1_Template_input_input_0_listener","onInput","NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener","onKeyDown","ɵɵelementEnd","item_r4","$implicit","ɵɵclassMapInterpolate1","config","inputClass","ɵɵproperty","allowNumbersOnly","inputType","placeholder","inputStyles","otpForm","controls","getBoxId","NgOtpInputComponent_div_0_Template","ɵɵtemplate","ɵɵpipe","containerClass","ɵɵpropertyInterpolate1","componentKey","containerStyles","ɵɵadvance","ɵɵpipeBind1","KeyboardUtil","ifTab","event","ifKey","ifDelete","ifBackspace","ifRightArrow","ifLeftArrow","ifSpacebar","keys","keysToCheck","split","some","k","key","KeysPipe","transform","value","Object","ɵfac","KeysPipe_Factory","t","ɵpipe","ɵɵdefinePipe","name","type","pure","ngDevMode","ɵsetClassMetadata","args","NgOtpInputComponent","constructor","keysPipe","document","length","onInputChange","inputControls","Array","Math","random","toString","substring","Date","getTime","isPasswordInput","ngOnInit","addControl","getControlName","valueChanges","subscribe","v","forEach","val","setValue","rebuildValue","ngAfterViewInit","disableAutoFocus","containerItem","getElementById","ele","getElementsByClassName","focus","idx","inputIdx","prevInputId","currentInputId","preventDefault","target","clearInput","setSelected","newVal","currentVal","validateNumber","stopPropagation","nextInputId","ifValidKeyCode","test","eleId","ctrlName","HTMLInputElement","focusTo","setSelectionRange","setTimeout","inp","isMobile","navigator","userAgent","isNaN","reset","replace","from","c","get","indexOfElementToFocus","ctrlVal","isLengthExceed","isCaseTransformEnabled","letterCase","toLocaleLowerCase","transformedVal","toUpperCase","toLowerCase","formCtrl","emit","e","clipboardData","window","pastedData","getData","NgOtpInputComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","outputs","decls","vars","consts","template","NgOtpInputComponent_Template","dependencies","NgIf","NgStyle","NgForOf","DefaultValueAccessor","PatternValidator","NgControlStatus","FormControlDirective","styles","selector","Document","decorators","NgOtpInputModule","NgOtpInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","declarations","exports","Config","NgOtpInputConfig"],"sources":["C:/Projects/RecipesSharer/web/node_modules/ng-otp-input/fesm2020/ng-otp-input.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\nclass KeyboardUtil {\r\n    static ifTab(event) {\r\n        return this.ifKey(event, 'Tab');\r\n    }\r\n    static ifDelete(event) {\r\n        return this.ifKey(event, 'Delete;Del');\r\n    }\r\n    static ifBackspace(event) {\r\n        return this.ifKey(event, 'Backspace');\r\n    }\r\n    static ifRightArrow(event) {\r\n        return this.ifKey(event, 'ArrowRight;Right');\r\n    }\r\n    static ifLeftArrow(event) {\r\n        return this.ifKey(event, 'ArrowLeft;Left');\r\n    }\r\n    static ifSpacebar(event) {\r\n        return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\r\n    }\r\n    static ifKey(event, keys) {\r\n        let keysToCheck = keys.split(';');\r\n        return keysToCheck.some(k => k === event.key);\r\n    }\r\n}\n\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\r\n/** @nocollapse */ KeysPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\n/** @nocollapse */ KeysPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, name: \"keys\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'keys'\r\n                }]\r\n        }] });\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe, document) {\r\n        this.keysPipe = keysPipe;\r\n        this.document = document;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    get inputType() {\r\n        return this.config?.isPasswordInput\r\n            ? 'password'\r\n            : this.config?.allowNumbersOnly\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = this.document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    onKeyDown($event, inputIdx) {\r\n        const prevInputId = this.getBoxId(inputIdx - 1);\r\n        const currentInputId = this.getBoxId(inputIdx);\r\n        if (KeyboardUtil.ifSpacebar($event)) {\r\n            $event.preventDefault();\r\n            return false;\r\n        }\r\n        if (KeyboardUtil.ifBackspace($event)) {\r\n            if (!$event.target.value) {\r\n                this.clearInput(prevInputId, inputIdx - 1);\r\n                this.setSelected(prevInputId);\r\n            }\r\n            else {\r\n                this.clearInput(currentInputId, inputIdx);\r\n            }\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n    }\r\n    onInput($event) {\r\n        let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\r\n        if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\r\n            $event.target.value = '';\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            return;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        if (KeyboardUtil.ifTab($event)) {\r\n            inputIdx -= 1;\r\n        }\r\n        const nextInputId = this.getBoxId(inputIdx + 1);\r\n        const prevInputId = this.getBoxId(inputIdx - 1);\r\n        const currentInputId = this.getBoxId(inputIdx);\r\n        if (KeyboardUtil.ifRightArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifLeftArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifDelete($event)) {\r\n            if (!$event.target.value) {\r\n                this.clearInput(prevInputId, inputIdx - 1);\r\n                this.setSelected(prevInputId);\r\n            }\r\n            else {\r\n                this.clearInput(currentInputId, inputIdx);\r\n            }\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidKeyCode($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    validateNumber(val) {\r\n        return val && /^[0-9]+$/.test(val);\r\n    }\r\n    getBoxId(idx) {\r\n        return `otp_${idx}_${this.componentKey}`;\r\n    }\r\n    clearInput(eleId, inputIdx) {\r\n        let ctrlName = this.getControlName(inputIdx);\r\n        this.otpForm.controls[ctrlName]?.setValue(null);\r\n        const ele = this.document.getElementById(eleId);\r\n        if (ele && ele instanceof HTMLInputElement) {\r\n            ele.value = null;\r\n        }\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = this.document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidKeyCode(event) {\r\n        const inp = event.key;\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = this.document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = this.document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        if (this.formCtrl?.setValue) {\r\n            this.formCtrl.setValue(val);\r\n        }\r\n        this.onInputChange.emit(val);\r\n        this.currentVal = val;\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData || (this.config.allowNumbersOnly && !this.validateNumber(pastedData))) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\r\n/** @nocollapse */ NgOtpInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputComponent, deps: [{ token: KeysPipe }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgOtpInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: NgOtpInputComponent, selector: \"ng-otp-input\", inputs: { config: \"config\", formCtrl: \"formCtrl\" }, outputs: { onInputChange: \"onInputChange\" }, ngImport: i0, template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"keys\": KeysPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ng-otp-input', template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: KeysPipe }, { type: Document, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], onInputChange: [{\r\n                type: Output\r\n            }], formCtrl: [{\r\n                type: Input\r\n            }] } });\n\nclass NgOtpInputModule {\r\n}\r\n/** @nocollapse */ NgOtpInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgOtpInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, declarations: [NgOtpInputComponent, KeysPipe], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NgOtpInputComponent] });\r\n/** @nocollapse */ NgOtpInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, providers: [KeysPipe], imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            ReactiveFormsModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule\r\n                    ],\r\n                    declarations: [NgOtpInputComponent, KeysPipe],\r\n                    exports: [NgOtpInputComponent],\r\n                    providers: [KeysPipe]\r\n                }]\r\n        }] });\n\nclass Config {\r\n}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}