{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst API = 'auth/';\nexport class AuthService {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n    this.setUser = data => window.sessionStorage.setItem('user', JSON.stringify(data));\n    this.getUser = () => JSON.parse(window.sessionStorage.getItem('user') || JSON.stringify(``))?.data || false;\n    this.removeUser = () => window.sessionStorage.removeItem('user');\n    this.logout = (route = '/login') => {\n      window.sessionStorage.removeItem('user');\n      this.route.navigate([route]);\n    };\n    this.checkPermissions = form => this.http.post(`${API}checkPermissions`, form).toPromise();\n    this.verify = token => this.http.post(`${API}verify`, {\n      url: token\n    });\n    this.recover = email => this.http.post(`${API}recover`, {\n      email\n    });\n    this.sendOtp = otp => this.http.post(`${API}check-code`, {\n      code: otp\n    });\n    this.reset = form => this.http.post(`${API}reset`, form);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["API","AuthService","constructor","http","route","setUser","data","window","sessionStorage","setItem","JSON","stringify","getUser","parse","getItem","removeUser","removeItem","logout","navigate","checkPermissions","form","post","toPromise","verify","token","url","recover","email","sendOtp","otp","code","reset","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Projects\\RecipesSharer\\web\\src\\app\\services\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  CheckPermissionDTO,\r\n  GetUserDTO,\r\n  ResetParamsDTO\r\n} from 'src/app/dtos';\r\nimport { IAUTH } from 'src/app/interfaces';\r\nimport { Router } from '@angular/router';\r\n\r\nconst API = 'auth/';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService implements IAUTH {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private route: Router\r\n  ) { }\r\n\r\n  setUser = (data: any) => window.sessionStorage.setItem('user', JSON.stringify(data))\r\n  getUser = (): GetUserDTO => JSON.parse(window.sessionStorage.getItem('user') || JSON.stringify(``))?.data || false;\r\n  removeUser = (): void => window.sessionStorage.removeItem('user');\r\n  logout = (route: string = '/login') => {\r\n    window.sessionStorage.removeItem('user');\r\n    this.route.navigate([route]);\r\n  };\r\n\r\n  checkPermissions = (form: CheckPermissionDTO) => this.http.post(`${API}checkPermissions`, form).toPromise();\r\n\r\n  verify = (token: string) => this.http.post<any>(`${API}verify`, { url: token });\r\n\r\n  recover = (email: string) => this.http.post<GetUserDTO>(`${API}recover`, { email });\r\n\r\n  sendOtp = (otp: string) => this.http.post<any>(`${API}check-code`, { code: otp });\r\n\r\n  reset = (form: ResetParamsDTO) => this.http.post<any>(`${API}reset`, form);\r\n\r\n}\r\n"],"mappings":";;;AAUA,MAAMA,GAAG,GAAG,OAAO;AAKnB,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAgB,EAChBC,KAAa;IADb,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,KAAK,GAALA,KAAK;IAGf,KAAAC,OAAO,GAAIC,IAAS,IAAKC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,CAAC;IACpF,KAAAM,OAAO,GAAG,MAAkBF,IAAI,CAACG,KAAK,CAACN,MAAM,CAACC,cAAc,CAACM,OAAO,CAAC,MAAM,CAAC,IAAIJ,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEL,IAAI,IAAI,KAAK;IAClH,KAAAS,UAAU,GAAG,MAAYR,MAAM,CAACC,cAAc,CAACQ,UAAU,CAAC,MAAM,CAAC;IACjE,KAAAC,MAAM,GAAG,CAACb,KAAA,GAAgB,QAAQ,KAAI;MACpCG,MAAM,CAACC,cAAc,CAACQ,UAAU,CAAC,MAAM,CAAC;MACxC,IAAI,CAACZ,KAAK,CAACc,QAAQ,CAAC,CAACd,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,KAAAe,gBAAgB,GAAIC,IAAwB,IAAK,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAC,GAAGrB,GAAG,kBAAkB,EAAEoB,IAAI,CAAC,CAACE,SAAS,EAAE;IAE3G,KAAAC,MAAM,GAAIC,KAAa,IAAK,IAAI,CAACrB,IAAI,CAACkB,IAAI,CAAM,GAAGrB,GAAG,QAAQ,EAAE;MAAEyB,GAAG,EAAED;IAAK,CAAE,CAAC;IAE/E,KAAAE,OAAO,GAAIC,KAAa,IAAK,IAAI,CAACxB,IAAI,CAACkB,IAAI,CAAa,GAAGrB,GAAG,SAAS,EAAE;MAAE2B;IAAK,CAAE,CAAC;IAEnF,KAAAC,OAAO,GAAIC,GAAW,IAAK,IAAI,CAAC1B,IAAI,CAACkB,IAAI,CAAM,GAAGrB,GAAG,YAAY,EAAE;MAAE8B,IAAI,EAAED;IAAG,CAAE,CAAC;IAEjF,KAAAE,KAAK,GAAIX,IAAoB,IAAK,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAM,GAAGrB,GAAG,OAAO,EAAEoB,IAAI,CAAC;EAlBtE;EAAC,QAAAY,CAAA,G;qBALM/B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtC,WAAW;IAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}